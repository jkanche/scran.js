/**
 * Slice each array in a collection of equilength arrays.
 *
 * @param {object} x - Object containing a collection of arrays (or TypedArrays) of the same length.
 * @param {Array|TypedArray} slice - Array of indices specifing the slice to extract from each array in `x`.
 *
 * @return {object} An object with the same keys as `x`, where each value is the desired slice of the corresponding array of `x`.
 */
export function sliceArrayCollection(x, slice) {
    let sub = {};
    for (const [k, v] of Object.entries(x)) {
        let copy = new v.constructor(slice.length);
        slice.forEach((x, i) => { copy[i] = v[x]; });
        sub[k] = copy;
    }
    return sub;
}

/**
 * Split an array collection based on a factor of interest.
 *
 * @param {object} x - Object containing a collection of arrays (or TypedArrays) of the same length.
 * @param {object} split - Object describing how the arrays should be split, usually generated by {@linkcode splitByFactor}.
 *
 * @return {object} Object where each key is a factor level (i.e., a key of `split`).
 * Each value is an array collection that is sliced to the entries corresponding to that factor level.
 */
export function splitArrayCollection(x, split) {
    let splits = {};
    for (const [k, v] of Object.entries(split)) {
        splits[k] = sliceArrayCollection(x, v);
    }
    return splits;
}

/**
 * Combine multiple array collections by concatenating corresponding arrays with the same key across collections.
 * If no corresponding array is present in a collection, its entries in the concatenated array is filled with `null`s.
 * Note that any TypedArrays will be converted into arrays.
 *
 * @param {Array} inputs - Array of objects where each object is itself an array collection,
 * i.e., all values should be arrays of the same length.
 * @param {object} [options] - Optional parameters.
 * @param {?Array} [options.lengths] - Array of integers of length equal to `inputs`.
 * Each entry specifies the lengths of the arrays in the corresponding entry of `inputs`.
 * This needs to be supplied if any `inputs` are empty (i.e., no arrays) - otherwise, if `null`, this is inferred from `inputs`.
 *
 * @return {object} Object representing an array collection.
 * Each key corresponds to any key across `inputs` while each value is an array containing the concatenation of that key's arrays across all `inputs`.
 */
export function combineArrayCollections(inputs, { lengths = null } = {}) {
    // Inferring lengths.
    if (lengths === null) {
        lengths = [];
        for (const current of inputs) {
            let curkeys = Object.keys(current);
            if (curkeys.length == 0) {
                throw new Error("all 'inputs' must be non-empty if 'lengths = null'");
            }
            lengths.push(current[curkeys[0]].length);
        }
    } else if (lengths.length != inputs.length) {
        throw new Error("'lengths' and 'inputs' should have the same length");
    }

    let total = 0;
    lengths.forEach(x => { total += x; });

    // Get all annotations keys across datasets; we then concatenate
    // columns with the same name, or we just fill them with missings.
    let ckeys = new Set();
    for (const current of inputs) {
        for (const a of Object.keys(current)) {
            ckeys.add(a);
        }
    }
    let anno_keys = Array.from(ckeys);

    let combined = {};
    for (const col of anno_keys) {
        let current_combined = new Array(total);
        let offset = 0;

        for (var i = 0; i < lengths.length; i++) {
            let current = inputs[i];
            let len = lengths[i];

            if (col in current) {
                if (current[col].length != len) {
                    throw new Error("mismatch in lengths for '" + col + "' in input object " + String(i + 1));
                }
                current[col].forEach((x, i) => { current_combined[i + offset] = x; });
            } else {
                current_combined.fill(null, offset, offset + len);
            }

            offset += len;
        }

        combined[col] = current_combined;
    }

    return combined;
}
